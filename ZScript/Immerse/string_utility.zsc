// Copyright (c) 2018 Benjamin Moir. All rights reserved.
// This work is licensed under the terms of the MIT license.  
// To obtain a copy, visit <https://opensource.org/licenses/MIT>.

struct StringUtility
{
    const HASH_MULTIPLIER = 37;

    static clearscope uint GetHash(string str, int startIndex = 0, int length = -1)
    {
        uint h = 0;

        if(length == -1) length = str.Length();

        for(int i = 0; i < length; i++)
        {
            int c = str.CharCodeAt(startIndex + i) & 0xff;
            h = h * HASH_MULTIPLIER + c;
        }

        return h;
    }

    static clearscope uint HexToInt(string hex, int startIndex = 0, int length = -1)
    {
        uint result = 0;

        if(length == -1) length = hex.Length();

        for(int i = 0; i < length; i++)
        {
            int c = hex.CharCodeAt(startIndex + i) & 0xff;

            if(c >= ASCII_0 && c <= ASCII_9)
                c -= ASCII_0;
            else if(c >= ASCII_A && c <= ASCII_F)
                c = c - ASCII_A + 10;
            else if(c >= ASCII_Lower_A && c <= ASCII_Lower_F)
                c = c - ASCII_Lower_A + 10;

            result = (result << 4) | (c & 0xf);
        }

        return result;
    }

    static clearscope string CharAtUtf8(string str, uint pos)
    {
        int b0 = str.CharCodeAt(pos) & 0xff, b1, b2, b3;
        int length, character = 0;

             if(b0 < 0x80) length = 1;
        else if(b0 < 0xe0) length = 2;
        else if(b0 < 0xf0) length = 3;
        else               length = 4;

        if(length > 1) b1 = str.CharCodeAt(pos + 1) & 0xff;
        if(length > 2) b2 = str.CharCodeAt(pos + 2) & 0xff;
        if(length > 3) b3 = str.CharCodeAt(pos + 3) & 0xff;

        switch(length)
        {
        default:
        case 1: return string.Format("%c", b0);
        case 2: return string.Format("%c%c", b0, b1);
        case 3: return string.Format("%c%c%c", b0, b1, b2);
        case 4: return string.Format("%c%c%c%c", b0, b1, b2, b3);
        }
    }

    static clearscope string UnicodeToUtf8(int codepoint)
    {
        if(codepoint <= 0x7f)
            return string.Format("%c", codepoint);

        if(codepoint <= 0x7ff)
        {
            int b0 = (codepoint >> 6) | 0xc0;
            int b1 = (codepoint & 0x3f) | 0x80;
            return string.Format("%c%c", b0, b1);
        }

        if(codepoint <= 0xffff)
        {
            int b0 = (codepoint >> 12) | 0xe0;
            int b1 = ((codepoint >> 6) & 0x3f) | 0x80;
            int b2 = (codepoint & 0x3f) | 0x80;
            return string.Format("%c%c%c", b0, b1, b2);
        }

        int b0 = (codepoint >> 18) | 0xf0;
        int b1 = ((codepoint >> 12) & 0x3f) | 0x80;
        int b2 = ((codepoint >> 6) & 0x3f) | 0x80;
        int b3 = (codepoint & 0x3f) | 0x80;
        return string.Format("%c%c%c%c", b0, b1, b2, b3);
    }

    static clearscope int Utf8ToUnicode(string character, int startIndex = 0)
    {
        int length, b0 = character.CharCodeAt(startIndex) & 0xff, b1, b2, b3;

             if(b0 < 0x80) length = 1;
        else if(b0 < 0xe0) length = 2;
        else if(b0 < 0xf0) length = 3;
        else               length = 4;

        if(length > 1) b1 = character.CharCodeAt(startIndex + 1) & 0xff;
        if(length > 2) b2 = character.CharCodeAt(startIndex + 2) & 0xff;
        if(length > 3) b3 = character.CharCodeAt(startIndex + 3) & 0xff;

        switch(length)
        {
        default:
        case 1: return b0;
        case 2: return (b0 - 0xc0) * 0x40 | (b1 - 0x80);
        case 3: return (b0 - 0xe0) * 0x1000 | (b1 - 0x80) * 0x40 | (b2 - 0x80);
        case 4: return (b0 - 0xf0) * 0x40000 | (b1 - 0x80) * 0x1000 | (b2 - 0x80) * 0x40 | (b3 - 0x80);
        }
    }

    static bool IsSpace(string ch, int index = 0)
    {
        return (ch.CharCodeAt(index) & 0xff) <= ASCII_Space;
    }

    static bool IsDigit(string ch, int index = 0)
    {
        int cc = ch.CharCodeAt(index) & 0xff;
        return cc <= ASCII_9 && cc >= ASCII_0;
    }

    static bool IsUpper(string ch, int index = 0)
    {
        int cc = ch.CharCodeAt(index) & 0xff;
        return cc <= ASCII_Lower_Z && cc >= ASCII_Lower_A;
    }

    static bool IsLower(string ch, int index = 0)
    {
        int cc = ch.CharCodeAt(index) & 0xff;
        return cc <= ASCII_Z && cc >= ASCII_A;
    }

    static bool IsLetter(string ch, int index = 0)
    {
        return IsUpper(ch, index) || IsLower(ch, index);
    }
}
